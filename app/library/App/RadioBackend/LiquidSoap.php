<?php
namespace App\RadioBackend;

class LiquidSoap extends AdapterAbstract
{
    /**
     * Read configuration from external service to Station object.
     * @return bool
     */
    public function read()
    {
        /* TODO: Implement read config */
    }

    /**
     * Write configuration from Station object to the external service.
     * @return bool
     */
    public function write()
    {
        $playlist_path = $this->station->getRadioPlaylistsDir();
        $media_path = $this->station->getRadioMediaDir();
        $config_path = $this->station->getRadioConfigDir();
        
        $ls_config = array();
        $ls_config[] = '# WARNING! This file is automatically generated by AzuraCast.';
        $ls_config[] = '# Do not update it directly!';
        $ls_config[] = '';

        $ls_config[] = 'set("init.daemon",true)';
        $ls_config[] = 'set("init.daemon.pidfile.path","'.$config_path.'/liquidsoap.pid")';
        $ls_config[] = 'set("log.file.path","'.$config_path.'/liquidsoap.log")';

        $ls_config[] = 'set("server.telnet",true)';
        $ls_config[] = 'set("server.telnet.bind_addr","127.0.0.1")';
        $ls_config[] = 'set("server.telnet.port", '.$this->_getTelnetPort().')';
        $ls_config[] = 'set("server.telnet.reverse_dns",false)';

        $ls_config[] = '';

        // Clear out existing playlists directory.
        $current_playlists = array_diff(scandir($playlist_path), array('..', '.'));
        foreach($current_playlists as $list)
            @unlink($playlist_path.'/'.$list);

        // Write new playlists.
        $playlist_weights = array();
        $playlist_vars = array();

        $ls_config[] = '# Playlists';
        
        foreach($this->station->playlists as $playlist)
        {
            $playlist_file = array();

            foreach($playlist->media as $media_file)
            {
                $media_file_path = $media_path.'/'.$media_file->path;
                $playlist_file[] = $media_file_path;
            }

            $playlist_file_contents = implode("\n", $playlist_file);

            $playlist_var_name = 'playlist_'.$playlist->getShortName();
            $playlist_file_path = $playlist_path.'/'.$playlist_var_name.'.pls';

            file_put_contents($playlist_file_path, $playlist_file_contents);

            $ls_config[] = $playlist_var_name.' = playlist(reload=1800,"'.$playlist_file_path.'")';

            $playlist_weights[] = $playlist->weight;
            $playlist_vars[] = $playlist_var_name;
        }

        $ls_config[] = '';
        $ls_config[] = '# Build Radio Station';
        $ls_config[] = 'radio = random(weights = ['.implode(', ', $playlist_weights).'],['.implode(', ', $playlist_vars).']);';
        
        // Add fallback error file.
        $error_song_path = APP_INCLUDE_ROOT.'/resources/error.mp3';

        $ls_config[] = '';
        $ls_config[] = '# Fallback Media File';
        $ls_config[] = 'security = single("'.$error_song_path.'")';
        $ls_config[] = 'requests = request.queue(id="requests")';

        // $ls_config[] = 'radio = fallback(track_sensitive = true, [playlists, security])';
        $ls_config[] = 'radio = fallback(track_sensitive = true, [requests, radio, security])';

        $ls_config[] = '';
        $ls_config[] = '# Outbound Broadcast';
        
        switch($this->station->frontend_type)
        {
            case 'icecast':
            default:
                $ic_settings = (array)$this->station->frontend_config;

                $icecast_port = $ic_settings['port'];
                $icecast_source_pw = $ic_settings['source_pw'];

                $output_params = [
                    '%mp3(samplerate=44100,stereo=true,bitrate=128)', // Required output format (%mp3 or %ogg)
                    'host = "localhost"',
                    'port = '.$icecast_port,
                    'password = "'.$icecast_source_pw.'"',
                    'name = "'.str_replace('"', '\'', $this->station->name).'"',
                    'description = "'.str_replace('"', '\'', $this->station->description).'"',
                    'mount = "/autodj.mp3"',
                    'radio', // Required
                ];
                $ls_config[] = 'output.icecast('.implode(', ', $output_params).')';
            break;
        }

        $ls_config_contents = implode("\n", $ls_config);

        $ls_config_path = $config_path.'/liquidsoap.liq';
        file_put_contents($ls_config_path, $ls_config_contents);
        return true;
    }

    public function isRunning()
    {
        $config_path = $this->station->getRadioConfigDir();
        $ls_pid_file = $config_path.'/liquidsoap.pid';

        if (file_exists($ls_pid_file))
        {
            $ls_pid = file_get_contents($ls_pid_file);
            $pid_result = exec('ps --pid '.$ls_pid.' &>/dev/null');

            return !empty($pid_result);
        }

        return false;
    }

    public function stop()
    {
        $config_path = $this->station->getRadioConfigDir();
        $ls_pid_file = $config_path.'/liquidsoap.pid';

        if (file_exists($ls_pid_file))
        {
            $ls_pid = file_get_contents($ls_pid_file);
            $kill_result = exec('kill -9 '.$ls_pid);

            @unlink($ls_pid_file);

            $this->log($kill_result);
        }
    }

    public function start()
    {
        $config_path = $this->station->getRadioConfigDir();
        $ls_config = escapeshellarg($config_path.'/liquidsoap.liq');

        /*
         * TODO: Figure out why this works, but simply running this script AS
         * the 'azuracast' user (the default state) doesn't. No idea.
         */

        $this->log(shell_exec('sudo -u azuracast liquidsoap '.$ls_config.' 2>&1'));
    }

    public function restart()
    {
        $this->stop();
        $this->start();
    }

    public function request($music_file)
    {
        $fp = stream_socket_client('tcp://localhost:'.$this->_getTelnetPort(), $errno, $errstr, 20);

        if (!$fp)
            throw new \App\Exception('Telnet failure: '.$errstr.' ('.$errno.')');

        fwrite($fp, "requests.push ".str_replace(array("\\'", '&amp;'), array("'",'&'),urldecode($music_file))."\nquit\n");

        $eat = '';
        while (!feof($fp))
            $eat .= fgets($fp, 1024);

        fclose($fp);
        return true;
    }

    protected function _getTelnetPort()
    {
        return (8500 + (($this->station->id - 1) * 10));
    }
}