<?php
$title = 'File Manager';
$manual = true;
$page_class = 'page-file-manager';

$this->assets->collection('custom_js')
    ->addJs('vendors/bower_components/jPlayer/dist/jplayer/jquery.jplayer.min.js')
    ->addJs('vendors/bower_components/store-js/store.min.js')
    ->addJs('js/radio.js');
?>

<div class="block-header">
    <h2><?=$station->name ?></h2>
    <ul class="actions">
        <li>
            <a href="<?=$this->url->routeFromHere(['controller' => 'util', 'action' => 'write']) ?>" title="Save Changes and Restart Station">
                <i class="zmdi zmdi-save"></i>
            </a>
        </li>
    </ul>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="card">
            <div class="card-header ch-alt">
                <h2>Music File Manager</h2>
            </div>

            <div class="card-body">
                <div id="breadcrumb" class="breadcrumb m-b-0">&nbsp;</div>
            </div>
            <div class="card-body card-padding-sm">
                <div id="upload_progress"></div>
                <div id="file_drop_target">
                    Drag files here to upload to this folder
                    <b>or</b>
                    <input type="file" multiple />
                </div>

                <div class="row p-t-20">
                    <div class="col-sm-6">
                        With selected:

                    <? if (!empty($playlists)): ?>
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                                Add to Playlist
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu">
                            <? foreach($playlists as $playlist_id => $playlist_name): ?>
                                <li><a href="#" class="btn-batch" data-action="playlist_<?=$playlist_id ?>"><?=$playlist_name ?></a></li>
                            <? endforeach; ?>
                            </ul>
                        </div>
                    <? endif; ?>
                        <button type="button" class="btn btn-warning btn-batch" data-action="clear">Clear Playlists</button>
                        <button type="button" class="btn btn-danger btn-batch" data-action="delete">Delete</button>
                    </div>
                    <div class="col-sm-6">
                        <form method="post" id="mkdir">
                        <div class="input-group">
                            <input name="name" type="text" class="form-control" placeholder="New Folder Name" aria-label="...">
                            <div class="input-group-btn">
                                <button type="submit" class="btn btn-default">Create Folder</button>
                            </div>
                        </div>
                        </form>
                    </div>
                </div>
            </div>
            <div class="table-responsive">
                <table class="data-table table table-striped" id="file-table">
                    <thead>
                        <tr>
                            <th data-column-id="name" data-formatter="playable" data-identifier="true">Name</th>
                            <th data-column-id="media_title" data-visible="false">Title</th>
                            <th data-column-id="media_artist" data-visible="false">Artist</th>
                            <th data-column-id="media_length" data-formatter="file_length">Length</th>
                            <th data-column-id="size" data-formatter="file_size">Size</th>
                            <th data-column-id="mtime" data-formatter="file_mtime">Modified</th>
                            <th data-column-id="media_playlists">Playlists</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
$(function() {
    var XSRF = '<?=$CSRF ?>';
    var MAX_UPLOAD_SIZE = <?=$MAX_UPLOAD_SIZE ?>;

    var $current_dir = '';

    $(window).bind('hashchange',list);

    $("#file-table").bootgrid({
        ajax: true,
        selection: true,
        multiSelect: true,
        rowSelect: false,
        caseSensitive: false,
        css: {
            icon: 'zmdi icon',
            iconColumns: 'zmdi-view-module',
            iconDown: 'zmdi-sort-amount-desc',
            iconRefresh: 'zmdi-refresh',
            iconUp: 'zmdi-sort-amount-asc'
        },
        url: "<?=$this->url->routeFromHere(['action' => 'list']) ?>",
        post: function() {
            return { 'file': $current_dir };
        },
        formatters: {
            "playable": function(column, row) {
                var $url = row.is_dir ? '#' + row.path : '<?=$this->url->routeFromHere(['action' => 'download']) ?>?file='+encodeURIComponent(row.path);
                var $icon = '';

                if (row.media_is_playable)
                    $icon = '<a class="file-icon btn-audio" href="javascript:handlePlayClick(\''+$url+'\');" data-url="'+$url+'"><i class="zmdi zmdi-play"></i></a>';
                else
                    $icon = '<span class="file-icon"><i class="zmdi zmdi-'+(row.is_dir ? 'folder' : 'file')+'"></i></span>';

                var $link = '<a class="name" href="'+$url+'" title="'+row.name+'">'+row.media_name+'</a>';

                return '<div class="'+(row.is_dir ? 'is_dir' : 'is_file')+'">'+$icon + $link + '<br><small>'+row.text+'</small></div>';
            },
            "file_length": function(column, row) {
                if (row.media_length_text)
                    return row.media_length_text;
                else
                    return 'N/A';
            },
            "file_size": function(column, row) {
                return formatFileSize(row.size);
            },
            "file_mtime": function(column, row) {
                return formatTimestamp(row.mtime);
            }
        }
    }).on('click.rs.jquery.bootgrid', function(e, columns, row) {
        // whole-row click handler
    });

    // Create new directory
    $('form#mkdir').submit(function(e) {
        e.preventDefault();

        var hashval = window.location.hash.substr(1);
        var $dir = $(this).find('[name=name]');

        $dir.val().length && $.post('<?=$this->url->routeFromHere(['action' => 'mkdir']) ?>',{
            name: $dir.val(),
            xsrf: XSRF,
            file: hashval
        },function(data){
            list();
        },'json');

        $dir.val('');
        return false;
    });

    $('.btn-batch').on('click', function(e) {
        e.preventDefault();

        var hashval = window.location.hash.substr(1);

        $files = [];
        $('#file-table').find('tr.active').each(function() {
            $files.push($(this).data('row-id'));
        });

        console.log($files);

        $files.length && $.post('<?=$this->url->routeFromHere(['action' => 'batch']) ?>',{
            'do': $(this).data('action'),
            'files': $files.join('|'),
            'xsrf': XSRF,
            'file': hashval
        },function(data){
            list();
        },'json');

        $(this).closest('.btn-group').removeClass('open');
        return false;
    });

    /*
    $('#file-check-all').on('change', function(e) {
        var $is_checked = $(this).prop('checked');
        $('#file-table').find('tbody input[type=checkbox]').prop('checked', $is_checked);
    });
    */

    // File upload stuff
    $('#file_drop_target').bind('dragover',function(){
        $(this).addClass('drag_over');
        return false;
    }).bind('dragend',function(){
        $(this).removeClass('drag_over');
        return false;
    }).bind('drop',function(e){
        e.preventDefault();
        var files = e.originalEvent.dataTransfer.files;
        $.each(files,function(k,file) {
            uploadFile(file);
        });
        $(this).removeClass('drag_over');
    }).find('input[type=file]').on('change', function(e) {
        e.preventDefault();

        $.each(this.files,function(k,file) {
            uploadFile(file);
        });
    });

    function uploadFile(file) {
        var folder = window.location.hash.substr(1);

        if(file.size > MAX_UPLOAD_SIZE) {
            var $error_row = renderFileSizeErrorRow(file,folder);
            $('#upload_progress').append($error_row);
            window.setTimeout(function(){$error_row.fadeOut();},5000);
            return false;
        }

        var $row = renderFileUploadRow(file,folder);

        $('#upload_progress').append($row);

        var fd = new FormData();
        fd.append('file_data',file);
        fd.append('file',folder);
        fd.append('xsrf',XSRF);

        var xhr = new XMLHttpRequest();
        xhr.open('POST', '<?=$this->url->routeFromHere(['action' => 'upload']) ?>');
        xhr.onload = function() {
            $row.remove();
            list();
        };
        xhr.upload.onprogress = function(e){
            if(e.lengthComputable) {
                $row.find('.progress').css('width',(e.loaded/e.total*100 | 0)+'%' );
            }
        };
        xhr.send(fd);
    }

    function renderFileUploadRow(file,folder) {
        return $row = $('<div/>')
            .append( $('<span class="fileuploadname" />').text( (folder ? folder+'/':'')+file.name))
            .append( $('<div class="progress_track"><div class="progress"></div></div>')  )
            .append( $('<span class="size" />').text(formatFileSize(file.size)) )
    }

    function renderFileSizeErrorRow(file,folder) {
        return $row = $('<div class="error" />')
            .append( $('<span class="fileuploadname" />').text( 'Error: ' + (folder ? folder+'/':'')+file.name))
            .append( $('<span/>').html(' file size - <b>' + formatFileSize(file.size) + '</b>'
                +' exceeds max upload size of <b>' + formatFileSize(MAX_UPLOAD_SIZE) + '</b>')  );
    }

    function list() {
        var hashval = window.location.hash.substr(1);
        $('#breadcrumb').empty().html(renderBreadcrumbs(hashval));

        console.log('Relisting for directory: #'+hashval);

        $current_dir = hashval;
        $('#file-table').bootgrid("clear").bootgrid("reload");
    }

    /*
    function renderFileRow(data) {


        var $checkbox = $('<div />').addClass('checkbox checkbox-inline')
            .append('<input type="checkbox" class="file-check" value="'+data.name+'" />')
            .append('<i class="input-helper"></i>');

        var $icon = '';
        if (data.media.is_playable)
            $icon = '<a class="file-icon btn-audio" href="#" data-url="'+$url+'"><i class="zmdi zmdi-play"></i></a>';
        else
            $icon = '<span class="file-icon"><i class="zmdi zmdi-'+(data.is_dir ? 'folder' : 'file')+'"></i></span>';

        var $link = $('<a class="name" />')
            .attr('href', $url)
            .attr('title', data.name)
            .text(data.text);

        var $html = $('<tr />')
            .addClass(data.is_dir ? 'is_dir' : 'is_file')
            .append( $('<td />').append($checkbox) )
            .append( $('<td class="first" />').append($icon).append($link).append('<br><small>'+data.media.name+'</small>') )
            .append( $('<td/>').data('sort',data.is_dir ? -1 : data.size)
                .html($('<span class="size" />').text(formatFileSize(data.size))) )
            .append( $('<td/>').data('sort',data.mtime).text(formatTimestamp(data.mtime)) )
            .append( $('<td/>').html(data.media.playlists.join('<br>')) );
        return $html;
    }
    */

    function renderBreadcrumbs(path) {
        var base = "",
            $html = $('<div/>').append( $('<a href=#>Home</a></div>') );
        $.each(path.split('/'),function(k,v){
            if(v) {
                $html.append( $('<span/>').text(' ▸ ') )
                    .append( $('<a/>').attr('href','#'+base+v).text(v) );
                base += v + '/';
            }
        });
        return $html;
    }

    function formatTimestamp(unix_timestamp) {
        var m = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        var d = new Date(unix_timestamp*1000);
        return [m[d.getMonth()],' ',d.getDate(),', ',d.getFullYear()," ",
            (d.getHours() % 12 || 12),":",(d.getMinutes() < 10 ? '0' : '')+d.getMinutes(),
            " ",d.getHours() >= 12 ? 'PM' : 'AM'].join('');
    }

    function formatFileSize(bytes) {
        var s = ['bytes', 'KB','MB','GB','TB','PB','EB'];
        for(var pos = 0;bytes >= 1000; pos++,bytes /= 1024);
        var d = Math.round(bytes*10);
        return pos ? [parseInt(d/10),".",d%10,"&nbsp;",s[pos]].join('') : bytes + ' bytes';
    }
})
</script>